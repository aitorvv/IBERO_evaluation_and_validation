Refs <- left_join(Refs, Quartiles)
str(Refs)
Categories_noyear <- Journals %>% select(Journal,Area) %>% unique()
Categories_noyear <- Journals %>% select(Journal,Area) %>% unique()
Categories_noyear <- aggregate(Area ~ Journal, data = Categories_noyear, FUN = paste, collapse = ", ")
Refs <- left_join(Refs, Categories_noyear)
Refs <- left_join(Refs, Categories_noyear)
# Refs2 <- Refs %>% mutate(categories = ifelse(is.na(categories),Area,categories))
Refs <- Refs %>% mutate(categories = ifelse(is.na(categories),Area,categories))
#FIliaci?n por investigador:
Fils <- rbindlist(SuperFILS,fill = TRUE)
# Crear carpeta para almacenar ficheros, en caso de que no exista
if (!dir.exists("automatizacion_IN_output")) dir.create("automatizacion_IN_output/", recursive = T)
# Guardar ficheros
write.csv(IN,"automatizacion_IN_output/IN.csv")
write.csv(Maeztu,"automatizacion_IN_output/Maeztu.csv")
write.csv(Refs,"automatizacion_IN_output/Refs.csv")
write.csv(Fils,"automatizacion_IN_output/Fils.csv")
# library("tidyverse")
# Refs <- read.csv("C:/Users/celia/OneDrive - Universidad de Valladolid/Documentos/ProyectoEE/0_proyecto/automatizacionR/Refs.csv",
#                  header = TRUE,sep = ",", stringsAsFactors=FALSE)
Refs <- Refs[,-1]
names(Refs) <- sapply(names(Refs), function(x) gsub(":", ".", x))
#Seleccionamos y ordenamos columnas de inter?s:
RefOut <- Refs %>%
mutate(prism.pageRange = ifelse(is.na(prism.pageRange),"",paste0("; p",prism.pageRange)),
prism.volume = ifelse(is.na(prism.volume),"",paste0("; vol",prism.volume))) %>%
mutate(dc.title = paste0(dc.title,prism.volume,prism.pageRange)) %>%
select(Name,authname,dc.title,Journal,dc.description,subtypeDescription,categories,Area,Fecha,prism.doi,prism.issn,prism.eIssn,sjr_best_quartile)
install.packages(c("bit", "broom", "bslib", "callr", "cli", "colorspace", "curl", "data.table", "dbplyr", "digest", "dplyr", "evaluate", "fansi", "fontawesome", "forcats", "fs", "gargle", "gert", "ggplot2", "highr", "htmltools", "htmlwidgets", "httpuv", "isoband", "jsonlite", "knitr", "lubridate", "markdown", "modelr", "openssl", "openxlsx", "packrat", "pkgbuild", "pkgload", "plyr", "processx", "ps", "purrr", "Rcpp", "readxl", "rmarkdown", "roxygen2", "rsconnect", "sass", "shiny", "sourcetools", "stringi", "stringr", "testthat", "tidyr", "tinytex", "utf8", "vctrs", "vroom", "whisker", "xfun", "yaml", "zip"))
install.packages(c("ggplot2", "httpuv", "readr"))
knitr::opts_chunk$set(echo = TRUE)
# Importing data
DATA.SI<- read.csv2("DATA4_SiteIndex.csv", header=TRUE, sep=";", dec=".")
# Importing data
DATA.SI<- read.csv("DATA4_SiteIndex.csv", header=TRUE, sep=";", dec=".")
# Importing data
DATA.SI<- read.csv("SiteIndex.csv", header=TRUE, sep=";", dec=".")
head(DATA.SI, 10)
library(lattice)
DATA.SI <-subset(DATA.SI, type !="H0_Age")
# Explore data again to check if the H0_Age plot type has been removed
head(DATA.SI, 10)
# Plotting and exporting dominant age vs age
# png format and indicate size (width and height)
png('stemanalysis.png', width = 683, height = 495)
xyplot(Height~Age,data=DATA.SI,groups=Plot,type="l", col="grey",
main="Pinus sylvestris
Alto Valle del Ebro, Spain", ylab="H0 (m)", xlab="Age (years)",)
dev.off()
while (!is.null(dev.list()))  dev.off()
# Plotting and exporting dominant age vs age
# png format and indicate size (width and height)
png('stemanalysis.png', width = 683, height = 495)
xyplot(Height~Age,data=DATA.SI,groups=Plot,type="l", col="grey",
main="Pinus sylvestris
Alto Valle del Ebro, Spain", ylab="H0 (m)", xlab="Age (years)",)
while (!is.null(dev.list()))  dev.off()
while (!is.null(dev.list()))
dev.off()
dev.off()
# Plotting and exporting dominant age vs age
# png format and indicate size (width and height)
png('stemanalysis.png', width = 683, height = 495)
xyplot(Height~Age,data=DATA.SI,groups=Plot,type="l", col="grey",
main="Pinus sylvestris
Alto Valle del Ebro, Spain", ylab="H0 (m)", xlab="Age (years)",)
# SITE INDEX CURVES
# Fitting Hossfeld I model by guide curve method
DATA.SI <- subset(DATA.SI, Age !=0)
DATA.SI$vardep <- DATA.SI$Age/ DATA.SI$Height^0.5
# Explore data
head(DATA.SI, 10)
# guide 'curve' by linear regression
Hossfeld.lineal <- lm(DATA.SI$vardep ~ (DATA.SI$Age))
summary(Hossfeld.lineal)
# Graphing the guide curve
X<-c(1:140)
Y<-c(X^2/(5.731933+0.176904*X)^2)
plot (X,Y,lwd=1, type="l", col = "red", lty=1, ljoin=10
, main="Guide Curve Hossfeld I"
, ylab="Height (m)", xlab = "Age (year)")
# SITE INDEX CURVES – Hosffeld I (with B1 constant)
# define the length of the X-axis
X<-c(1:120)
# define the 5 site index curves
Y<-c(X^2/(9.03572419+0.176904*X)^2)
K<-c(X^2/(6.5631625+0.176904*X)^2)
Z<-c(X^2/(4.67027977+0.176904*X)^2)
G<-c(X^2/(3.16104141+0.176904*X)^2)
H<-c(X^2/(1.92121351+0.176904*X)^2)
# plotting the H site curve (the highest one)
plot (X,H,lwd=1, type="l", col = "red", lty=1, ljoin=10,
main="Site index curves,
Hossfeld I, b common",
ylab="Height (m)", xlab = "Age (year)")
# add the other site index cuves
lines(X,K,lwd=1, col = "blue")
lines(X,Z,lwd=1, col = "green")
lines(X,G,lwd=1, col = "black")
lines(X,Y,lwd=1, col = "yellow")
# plotting the H site curve (the highest one)
plot (X,H,lwd=1, type="l", col = "red", lty=1, ljoin=10,
main="Site index curves,
Hossfeld I, b common",
ylab="Height (m)", xlab = "Age (year)")
# add the other site index cuves
lines(X,K,lwd=1, col = "blue")
# plotting the H site curve (the highest one)
plot (X,H,lwd=1, type="l", col = "red", lty=1, ljoin=10,
main="Site index curves,
Hossfeld I, b common",
ylab="Height (m)", xlab = "Age (year)")
# add the other site index cuves
lines(X,K,lwd=1, col = "blue")
# SITE INDEX CURVES – Hosffeld I (with B1 constant)
# define the length of the X-axis
X<-c(1:120)
# define the 5 site index curves
Y<-c(X^2/(9.03572419+0.176904*X)^2)
K<-c(X^2/(6.5631625+0.176904*X)^2)
Z<-c(X^2/(4.67027977+0.176904*X)^2)
G<-c(X^2/(3.16104141+0.176904*X)^2)
H<-c(X^2/(1.92121351+0.176904*X)^2)
# plotting the H site curve (the highest one)
plot (X,H,lwd=1, type="l", col = "red", lty=1, ljoin=10,
main="Site index curves,
Hossfeld I, b common",
ylab="Height (m)", xlab = "Age (year)")
# add the other site index cuves
lines(X,K,lwd=1, col = "blue")
# add the other site index cuves
lines(X,K,lwd=1, col = "blue")
lines(X,Z,lwd=1, col = "green")
lines(X,G,lwd=1, col = "black")
lines(X,Y,lwd=1, col = "yellow")
# plotting the H site curve (the highest one)
plot (X,H,lwd=1, type="l", col = "red", lty=1, ljoin=10,
main="Site index curves,
Hossfeld I, b common",
ylab="Height (m)", xlab = "Age (year)")
# add the other site index cuves
lines(X,K, col = "blue")
# SITE INDEX CURVES – Hosffeld I (with B1 constant)
# define the length of the X-axis
X<-c(1:120)
# define the 5 site index curves
Y<-c(X^2/(9.03572419+0.176904*X)^2)
K<-c(X^2/(6.5631625+0.176904*X)^2)
Z<-c(X^2/(4.67027977+0.176904*X)^2)
G<-c(X^2/(3.16104141+0.176904*X)^2)
H<-c(X^2/(1.92121351+0.176904*X)^2)
# plotting the H site curve (the highest one)
plot (X,H,lwd=1, type="l", col = "red", lty=1, ljoin=10,
main="Site index curves,
Hossfeld I, b common",
ylab="Height (m)", xlab = "Age (year)")
# add the other site index cuves
lines(X,K,lwd=1, col = "blue")
lines(X,Z,lwd=1, col = "green")
lines(X,G,lwd=1, col = "black")
lines(X,Y,lwd=1, col = "yellow")
# lty (Line types) can either be specified as an integer
# (0=blank, 1=solid (default), 2=dashed, 3=dotted, 4=dotdash, 5=longdash,
# 6=twodash)
# or as one of the character strings "blank", "solid", "dashed", "dotted",
# "dotdash", "longdash", or "twodash",
# where "blank" uses invisible lines (i.e., does not draw them).
# lty also works with lines and segments
# plotting the H site curve (the highest one)
plot (X,H,lwd=1, type="l", col = "red", lty=1, ljoin=10,
main="Site index curves,
Hossfeld I, b common",
ylab="Height (m)", xlab = "Age (year)")
# add the other site index cuves
plot.new(lines(X,K,lwd=1, col = "blue"))
# plotting the H site curve (the highest one)
plot.new(X,H,lwd=1, type="l", col = "red", lty=1, ljoin=10,
main="Site index curves,
Hossfeld I, b common",
ylab="Height (m)", xlab = "Age (year)")
# add the other site index cuves
lines(X,K,lwd=1, col = "blue")
# SITE INDEX CURVES – Hosffeld I (with B1 constant)
# define the length of the X-axis
X<-c(1:120)
# define the 5 site index curves
Y<-c(X^2/(9.03572419+0.176904*X)^2)
K<-c(X^2/(6.5631625+0.176904*X)^2)
Z<-c(X^2/(4.67027977+0.176904*X)^2)
G<-c(X^2/(3.16104141+0.176904*X)^2)
H<-c(X^2/(1.92121351+0.176904*X)^2)
# plotting the H site curve (the highest one)
plot (X,H,lwd=1, type="l", col = "red", lty=1, ljoin=10,
main="Site index curves,
Hossfeld I, b common",
ylab="Height (m)", xlab = "Age (year)")
# add the other site index cuves
### ejecutar desde chunk
lines(X,K,lwd=1, col = "blue")
lines(X,Z,lwd=1, col = "green")
lines(X,G,lwd=1, col = "black")
lines(X,Y,lwd=1, col = "yellow")
# lty (Line types) can either be specified as an integer
# (0=blank, 1=solid (default), 2=dashed, 3=dotted, 4=dotdash, 5=longdash,
# 6=twodash)
# or as one of the character strings "blank", "solid", "dashed", "dotted",
# "dotdash", "longdash", or "twodash",
# where "blank" uses invisible lines (i.e., does not draw them).
# lty also works with lines and segments
# SITE INDEX CURVES – Hosffeld I (with B1 constant)
# define the length of the X-axis
X<-c(1:120)
# define the 5 site index curves
Y<-c(X^2/(9.03572419+0.176904*X)^2)
K<-c(X^2/(6.5631625+0.176904*X)^2)
Z<-c(X^2/(4.67027977+0.176904*X)^2)
G<-c(X^2/(3.16104141+0.176904*X)^2)
H<-c(X^2/(1.92121351+0.176904*X)^2)
# plotting the H site curve (the highest one)
plot (X,H,lwd=1, type="l", col = "red", lty=1, ljoin=10,
main="Site index curves,
Hossfeld I, b common",
ylab="Height (m)", xlab = "Age (year)")
# add the other site index cuves
### ejecutar desde chunk
lines(X,K,lwd=1, col = "blue")
lines(X,Z,lwd=1, col = "green")
lines(X,G,lwd=1, col = "black")
lines(X,Y,lwd=1, col = "yellow")
# lty (Line types) can either be specified as an integer
# (0=blank, 1=solid (default), 2=dashed, 3=dotted, 4=dotdash, 5=longdash,
# 6=twodash)
# or as one of the character strings "blank", "solid", "dashed", "dotted",
# "dotdash", "longdash", or "twodash",
# where "blank" uses invisible lines (i.e., does not draw them).
# lty also works with lines and segments
# SITE INDEX CURVES – Hosffeld I (with B1 constant)
# define the length of the X-axis
X<-c(1:120)
# define the 5 site index curves
Y<-c(X^2/(9.03572419+0.176904*X)^2)
K<-c(X^2/(6.5631625+0.176904*X)^2)
Z<-c(X^2/(4.67027977+0.176904*X)^2)
G<-c(X^2/(3.16104141+0.176904*X)^2)
H<-c(X^2/(1.92121351+0.176904*X)^2)
# plotting the H site curve (the highest one)
plot (X,H,lwd=1, type="l", col = "red", lty=1, ljoin=10,
main="Site index curves,
Hossfeld I, b common",
ylab="Height (m)", xlab = "Age (year)")
### ejecutar desde chunk
lines(X,K,lwd=1, col = "blue")
# plotting the H site curve (the highest one)
plot (X,H,lwd=1, type="l", col = "red", lty=1, ljoin=10,
main="Site index curves,
Hossfeld I, b common",
ylab="Height (m)", xlab = "Age (year)")
### ejecutar desde chunk
lines(X,K,lwd=1, col = "blue")
# SITE INDEX CURVES – Hosffeld I (with B0 constant)
# define the length of the X-axis
X<-c(1:120)
# define the 5 site index curves
Q<-c(X^2/(5.731933+0.20994191 *X)^2)
W<-c(X^2/(5.731933+0.1852163 *X)^2)
E<-c(X^2/(5.731933+0.16628747 *X)^2)
R<-c(X^2/(5.731933+0.15119508 *X)^2)
U<-c(X^2/(5.731933+0.13879680 *X)^2)
# plotting the H site curve (the highest one)
plot (X, U, lwd=1, type="l", col = "red", lty=1, ljoin=10,
main="Site index curves,
Hossfeld I, a common"
, ylab="Height (m)", xlab = "Age (year)")
# add the other site index cuves
lines(X,W,lwd=1, col = "blue")
# SITE INDEX CURVES – Hosffeld I (with B0 constant)
# define the length of the X-axis
X<-c(1:120)
# define the 5 site index curves
Q<-c(X^2/(5.731933+0.20994191 *X)^2)
W<-c(X^2/(5.731933+0.1852163 *X)^2)
E<-c(X^2/(5.731933+0.16628747 *X)^2)
R<-c(X^2/(5.731933+0.15119508 *X)^2)
U<-c(X^2/(5.731933+0.13879680 *X)^2)
# plotting the H site curve (the highest one)
plot (X, U, lwd=1, type="l", col = "red", lty=1, ljoin=10,
main="Site index curves,
Hossfeld I, a common"
, ylab="Height (m)", xlab = "Age (year)")
# add the other site index cuves
lines(X,W,lwd=1, col = "blue")
lines(X,E,lwd=1, col = "green")
lines(X,R,lwd=1, col = "black")
lines(X,Q,lwd=1, col = "yellow")
# Superimposing the stem analysis to the Site Index Curves
xyplot(Height~Age,data=DATA.SI,groups=Plot,type="l", col="grey",
main="Stem analysis (Ps), Alto Valle del Ebro (Spain)
Hossfeld I b common", ylab="Height (m)", xlab="Age (year)",
panel=function(x, y, ...){
panel.xyplot(x, y, ...)
panel.lines(X, K, col=1, lwd=2)
panel.lines(X, Z, col=1, lwd=2)
panel.lines(X, G, col=1, lwd=2)
panel.lines(X, Y, col=1, lwd=2)
panel.lines(X, H, col=1, lwd=2)})
# Defining the Hossfeld model as an object to fit by nonlinear regression
Hossfeld <‐ Height~Age^2/(a+b*Age)^2
# Defining the Hossfeld model as an object to fit by nonlinear regression
Hossfeld <- Height~Age^2/(a+b*Age)^2
# Fit the model by non-linear regression.
# Start or seed values are the parameters from the linear regression
nlmod <- nls(Hossfeld, data=DATA.SI, start=list(a=5.7319, b=0.17166))
# Obtain the results from the regression
summary(nlmod)
ifelse('lattice' %in% installed.packages(), print('paquete lattice instalado'),
install.packages('lattice'))
DATA.SI <- read.csv("SiteIndex.csv", # seleccionamos el nombre del archivo a importar
header = TRUE, # indicamos que este archivo tiene encabezados
sep = ";", # indicamos el ; como separador de columnas
dec = ".") # y el . como separador de decimales
head(DATA.SI, 10) # ahora podemos echar un vistazo a los 10 primeros datos
DATA.SI <- read.csv("SiteIndex.csv", # seleccionamos el nombre del archivo a importar
header = TRUE, # indicamos que este archivo tiene encabezados
sep = ";", # indicamos el ; como separador de columnas
dec = ".") # y el . como separador de decimales
head(DATA.SI, 10) # ahora podemos echar un vistazo a los 10 primeros datos
# del conjunto de nuestros datos vamos a seleccionar un subconjunto:
# - type == HO_Age son datos de parcelas donde la edad y la altura dominante han sido medidas
# - type == StemAnalysis son datos de parcelas donde algunos árboles fueron cortados
#           para poder conocer la edad y crecimiento anual. Con esta información es
#           con la que se ha reconstruido el crecimiento del árbol, por lo que serán
#           los datos a utilizar
DATA.SI <- subset(DATA.SI, # seleccionamos nuestros datos
type !="H0_Age") # y eliminamos los datos que no queremos utilizar
head(DATA.SI, 10) # ahora podemos echar un vistazo a los 10 primeros datos para comprobar
# que hemos eliminado correctamente los no deseados
xyplot(Height~Age,data=DATA.SI,groups=Plot,type="l", col="grey",
main="Pinus sylvestris
Alto Valle del Ebro, Spain", ylab="H0 (m)", xlab="Age (years)",)
png('stemanalysis.png', width = 683, height = 495) #
xyplot(Height~Age,data=DATA.SI,groups=Plot,type="l", col="grey",
main="Pinus sylvestris
Alto Valle del Ebro, Spain", ylab="H0 (m)", xlab="Age (years)",)
#dev.off()
# graficamos los datos
xyplot(Height ~ Age, # representamos la altura respecto a la edad
data = DATA.SI, # seleccionamos nuestra base de datos
groups = Plot, # agrupamos los datos por parcelas
type = "l", # representamos la información con líneas
col = "grey", # seleccionamos el color
main = "Pinus sylvestris Alto Valle del Ebro, España", # título
ylab = "H0 (m)", # etiqueta Y
xlab = "Edad (años)") # etiqueta X
<img src="https://www.google.com/imgres?imgurl=https%3A%2F%2Fmedia.geeksforgeeks.org%2Fwp-content%2Fuploads%2F20200711235747%2Fgg1.png&imgrefurl=https%3A%2F%2Fwww.geeksforgeeks.org%2Fadding-straight-lines-to-a-plot-in-r-programming-abline-function%2F&tbnid=euqLNlrig84p8M&vet=12ahUKEwjG7ZzJmpX9AhWpW6QEHaW0BcsQMygAegUIARC5AQ..i&docid=aMbrTWYintd6fM&w=1050&h=1050&q=add%20lines%20to%20plot%20r&client=ubuntu&ved=2ahUKEwjG7ZzJmpX9AhWpW6QEHaW0BcsQMygAegUIARC5AQ">
<img src="https://www.google.com/imgres?imgurl=https%3A%2F%2Fmedia.geeksforgeeks.org%2Fwp-content%2Fuploads%2F20200711235747%2Fgg1.png&imgrefurl=https%3A%2F%2Fwww.geeksforgeeks.org%2Fadding-straight-lines-to-a-plot-in-r-programming-abline-function%2F&tbnid=euqLNlrig84p8M&vet=12ahUKEwjG7ZzJmpX9AhWpW6QEHaW0BcsQMygAegUIARC5AQ..i&docid=aMbrTWYintd6fM&w=1050&h=1050&q=add%20lines%20to%20plot%20r&client=ubuntu&ved=2ahUKEwjG7ZzJmpX9AhWpW6QEHaW0BcsQMygAegUIARC5AQ">
![](https://github.githubassets.com/images/modules/logos_page/GitHub-Mark.png){width='100px'}
```
```{r}
![](https://github.githubassets.com/images/modules/logos_page/GitHub-Mark.png){width='100px'}
![](https://github.githubassets.com/images/modules/logos_page/GitHub-Mark.png){width='100px'}
<img src="https://pbs.twimg.com/media/EiAuAS8VoAA1-4T?format=jpg&name=large" alt="JuveR" width="300px">
Para ilustrar el método de ajuste de curvas de calidad vamos a utilizar la ecuación
![alt text here](h.png)
![alt text here](/media/aitor/Elements1/aitor/PhD_UVa/9_lectures/2022-23/0_GITHUB-docencia/forestales/ordenacion/h.png)
```{r sample-image, fig.cap="(ref:sample-image)"}
knitr::include_graphics("h.png")
knitr::include_graphics("figuras/hossfeld_I.png")
knitr::opts_chunk$set(echo = TRUE)
ifelse('lattice' %in% installed.packages(), print('paquete lattice instalado'),
install.packages('lattice'))
library('lattice')
DATA.SI <- read.csv("SiteIndex.csv", # seleccionamos el nombre del archivo a importar
header = TRUE, # indicamos que este archivo tiene encabezados
sep = ";", # indicamos el ; como separador de columnas
dec = ".") # y el . como separador de decimales
head(DATA.SI, 10) # ahora podemos echar un vistazo a los 10 primeros datos
# del conjunto de nuestros datos vamos a seleccionar un subconjunto:
# - type == HO_Age son datos de parcelas donde la edad y la altura dominante han sido medidas
# - type == StemAnalysis son datos de parcelas donde algunos árboles fueron cortados
#           para poder conocer la edad y crecimiento anual. Con esta información es
#           con la que se ha reconstruido el crecimiento del árbol, por lo que serán
#           los datos a utilizar
DATA.SI <- subset(DATA.SI, # seleccionamos nuestros datos
type !="H0_Age") # y eliminamos los datos que no queremos utilizar
head(DATA.SI, 10) # ahora podemos echar un vistazo a los 10 primeros datos para comprobar
# que hemos eliminado correctamente los no deseados
# configuración del gráfico:
png('stemanalysis.png', # nombre
width = 683, # ancho imagen
height = 495) # alto imagen
# graficamos los datos
xyplot(Height ~ Age, # representamos la altura respecto a la edad
data = DATA.SI, # seleccionamos nuestra base de datos
groups = Plot, # agrupamos los datos por parcelas
type = "l", # representamos la información con líneas
col = "grey", # seleccionamos el color
main = "Pinus sylvestris Alto Valle del Ebro, España", # título
ylab = "H0 (m)", # etiqueta Y
xlab = "Edad (años)") # etiqueta X
# limpiamos los datos
DATA.SI <- subset(DATA.SI, # seleccionamos nuestros datos
Age != 0) # eliminamos las parcelas con edad = 0
# creamos una nueva variable
DATA.SI$vardep <- DATA.SI$Age/DATA.SI$Height^0.5
# exploramos los 10 primeros datos
head(DATA.SI, 10)
# guide 'curve' by linear regression
Hossfeld.lineal <- lm(DATA.SI$vardep ~ (DATA.SI$Age))
summary(Hossfeld.lineal)
# creamos la curva "guía" mediante un modelo de regresión lineal
Hossfeld.lineal <- lm(DATA.SI$vardep ~ DATA.SI$Age)
summary(Hossfeld.lineal)
# Graphing the guide curve
X<-c(1:140)
# creamos una lista con 140 valores de edad
X <- c(1:140)
# para cada valor aplicamos la fórmula Hossfeld I y obtenemos así la altura dominante
Y <- c(X^2 / (5.731933 + 0.176904*X)^2)
# teniendo las edades y alturas dominantes, ahora las dibujamos
plot(x = X, #
y = Y,
lwd = 1,
type = "l",
col = "red",
lty=1,
ljoin=10,
main="Guide Curve Hossfeld I",
ylab="Height (m)",
xlab = "Age (year)")
# creamos una lista con 140 valores de edad
X <- c(1:140)
# para cada valor aplicamos la fórmula Hossfeld I y obtenemos así la altura dominante
Y <- c(X^2 / (5.731933 + 0.176904*X)^2)
# configuración del gráfico para exportar
png('Curva_guia_HI.png', # nombre
width = 683, # ancho imagen
height = 495) # alto imagen
# teniendo las edades y alturas dominantes, ahora las dibujamos
plot(x = X, # variable x
y = Y, # variable y
lwd = 1,
type = "l", # dibujamos los datos como una línea
col = "red", # color
lty = 1,
ljoin = 10,
main = "Curva Guía Hossfeld I", # título
ylab = "Altura dominante (m)", # etiqueta y
xlab = "Edad (años)") # etiqueta x
# más información sobre la función plot en:
# https://www.rdocumentation.org/packages/graphics/versions/3.6.2/topics/plot
ip = as.data.frame(installed.packages()[,c(1,3:4)])
ip = ip[is.na(ip$Priority),1:2,drop=FALSE]
ip
# path
setwd("/media/aitor/Elements1/aitor/iuFOR_trabajo/Proyectos/IFN/4_simulations/IFN2_existencias/1_results/")  # pc
# libraries
library(readxl)
library(beepr)
# create temporal dataframes
plots_IFN2 <- data.frame()
trees_IFN2 <- data.frame()
# create a list with file names
files_list <- list.files(path = ".", pattern="xlsx")
# extract all the information needed from each file
for (doc in files_list) {
# plots
plot_data <- read_excel(doc, sheet = "Parcelas") # choose plot information
last_row <- nrow(plot_data)  # choose last row
useful_row <- plot_data[c(last_row),]  # extract information
# we add headers just the first time
ifelse(length(plots_IFN2) == 0, plots_IFN2 <- rbind(useful_row), plots_IFN2 <- rbind(plots_IFN2, useful_row))
# trees
tree_data <- read_excel(doc, sheet = "Nodo 2 - Pies inventariados")  # choose trees sheet
tree_data$sheet_SM4 <- 'Nodo 2 - Pies inventariados' # add the corresponding name of the sheet
# we add headers just the first time
ifelse(length(trees_IFN2) == 0, trees_IFN2 <- rbind(tree_data), trees_IFN2 <- rbind(trees_IFN2, tree_data))
}
# path
#setwd("/media/aitor/Elements1/aitor/iuFOR_trabajo/Proyectos/IFN/4_simulations/IFN2_existencias/1_results/")  # pc
setwd("/media/aitor/Elements1/aitor/Estudios_y_laboral/1.Formacion/6.0.Publicaciones/0.2022_Validacion-en-desarrollo/1.datos/SM4_simulations/IBEROps_IFN2")  # hpc
# create temporal dataframes
plots_IFN2 <- data.frame()
trees_IFN2 <- data.frame()
# create a list with file names
files_list <- list.files(path = ".", pattern="xlsx")
# extract all the information needed from each file
for (doc in files_list) {
# plots
plot_data <- read_excel(doc, sheet = "Parcelas") # choose plot information
last_row <- nrow(plot_data)  # choose last row
useful_row <- plot_data[c(last_row),]  # extract information
# we add headers just the first time
ifelse(length(plots_IFN2) == 0, plots_IFN2 <- rbind(useful_row), plots_IFN2 <- rbind(plots_IFN2, useful_row))
# trees
tree_data <- read_excel(doc, sheet = "Nodo 2 - Pies inventariados")  # choose trees sheet
tree_data$sheet_SM4 <- 'Nodo 2 - Pies inventariados' # add the corresponding name of the sheet
# we add headers just the first time
ifelse(length(trees_IFN2) == 0, trees_IFN2 <- rbind(tree_data), trees_IFN2 <- rbind(trees_IFN2, tree_data))
}
# beel sound
beep()
# beel sound
beep()
# beel sound
beep()
# beel sound
beep()
# beel sound
beep()
# beel sound
beep(sound = 8)
